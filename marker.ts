// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Marker extends pulumi.CustomResource {
    /**
     * Get an existing Marker resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MarkerState, opts?: pulumi.CustomResourceOptions): Marker {
        return new Marker(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'honeycombio:index/marker:Marker';

    /**
     * Returns true if the given object is an instance of Marker.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Marker {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Marker.__pulumiType;
    }

    /**
     * The dataset where this marker is placed. If not set, it will be Environment-wide.
     */
    declare public readonly dataset: pulumi.Output<string | undefined>;
    declare public readonly markerId: pulumi.Output<string>;
    /**
     * A message that appears above the marker and can be used to describe the marker.
     */
    declare public readonly message: pulumi.Output<string | undefined>;
    /**
     * The type of the marker (e.g. "deploy", "job-run")
     */
    declare public readonly type: pulumi.Output<string | undefined>;
    /**
     * A target URL for the Marker. Rendered as a link in the UI.
     */
    declare public readonly url: pulumi.Output<string | undefined>;

    /**
     * Create a Marker resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MarkerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MarkerArgs | MarkerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MarkerState | undefined;
            resourceInputs["dataset"] = state?.dataset;
            resourceInputs["markerId"] = state?.markerId;
            resourceInputs["message"] = state?.message;
            resourceInputs["type"] = state?.type;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as MarkerArgs | undefined;
            resourceInputs["dataset"] = args?.dataset;
            resourceInputs["markerId"] = args?.markerId;
            resourceInputs["message"] = args?.message;
            resourceInputs["type"] = args?.type;
            resourceInputs["url"] = args?.url;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Marker.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Marker resources.
 */
export interface MarkerState {
    /**
     * The dataset where this marker is placed. If not set, it will be Environment-wide.
     */
    dataset?: pulumi.Input<string>;
    markerId?: pulumi.Input<string>;
    /**
     * A message that appears above the marker and can be used to describe the marker.
     */
    message?: pulumi.Input<string>;
    /**
     * The type of the marker (e.g. "deploy", "job-run")
     */
    type?: pulumi.Input<string>;
    /**
     * A target URL for the Marker. Rendered as a link in the UI.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Marker resource.
 */
export interface MarkerArgs {
    /**
     * The dataset where this marker is placed. If not set, it will be Environment-wide.
     */
    dataset?: pulumi.Input<string>;
    markerId?: pulumi.Input<string>;
    /**
     * A message that appears above the marker and can be used to describe the marker.
     */
    message?: pulumi.Input<string>;
    /**
     * The type of the marker (e.g. "deploy", "job-run")
     */
    type?: pulumi.Input<string>;
    /**
     * A target URL for the Marker. Rendered as a link in the UI.
     */
    url?: pulumi.Input<string>;
}
