"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BurnAlert = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class BurnAlert extends pulumi.CustomResource {
    /**
     * Get an existing BurnAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BurnAlert(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of BurnAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BurnAlert.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["alertType"] = state?.alertType;
            resourceInputs["budgetRateDecreasePercent"] = state?.budgetRateDecreasePercent;
            resourceInputs["budgetRateWindowMinutes"] = state?.budgetRateWindowMinutes;
            resourceInputs["dataset"] = state?.dataset;
            resourceInputs["description"] = state?.description;
            resourceInputs["exhaustionMinutes"] = state?.exhaustionMinutes;
            resourceInputs["recipients"] = state?.recipients;
            resourceInputs["sloId"] = state?.sloId;
        }
        else {
            const args = argsOrState;
            if (args?.sloId === undefined && !opts.urn) {
                throw new Error("Missing required property 'sloId'");
            }
            resourceInputs["alertType"] = args?.alertType;
            resourceInputs["budgetRateDecreasePercent"] = args?.budgetRateDecreasePercent;
            resourceInputs["budgetRateWindowMinutes"] = args?.budgetRateWindowMinutes;
            resourceInputs["dataset"] = args?.dataset;
            resourceInputs["description"] = args?.description;
            resourceInputs["exhaustionMinutes"] = args?.exhaustionMinutes;
            resourceInputs["recipients"] = args?.recipients;
            resourceInputs["sloId"] = args?.sloId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BurnAlert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.BurnAlert = BurnAlert;
/** @internal */
BurnAlert.__pulumiType = 'honeycombio:index/burnAlert:BurnAlert';
//# sourceMappingURL=burnAlert.js.map