"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Trigger = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Trigger extends pulumi.CustomResource {
    /**
     * Get an existing Trigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Trigger(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Trigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Trigger.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["alertType"] = state?.alertType;
            resourceInputs["baselineDetails"] = state?.baselineDetails;
            resourceInputs["dataset"] = state?.dataset;
            resourceInputs["description"] = state?.description;
            resourceInputs["disabled"] = state?.disabled;
            resourceInputs["evaluationSchedules"] = state?.evaluationSchedules;
            resourceInputs["frequency"] = state?.frequency;
            resourceInputs["name"] = state?.name;
            resourceInputs["queryId"] = state?.queryId;
            resourceInputs["queryJson"] = state?.queryJson;
            resourceInputs["recipients"] = state?.recipients;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["thresholds"] = state?.thresholds;
        }
        else {
            const args = argsOrState;
            resourceInputs["alertType"] = args?.alertType;
            resourceInputs["baselineDetails"] = args?.baselineDetails;
            resourceInputs["dataset"] = args?.dataset;
            resourceInputs["description"] = args?.description;
            resourceInputs["disabled"] = args?.disabled;
            resourceInputs["evaluationSchedules"] = args?.evaluationSchedules;
            resourceInputs["frequency"] = args?.frequency;
            resourceInputs["name"] = args?.name;
            resourceInputs["queryId"] = args?.queryId;
            resourceInputs["queryJson"] = args?.queryJson;
            resourceInputs["recipients"] = args?.recipients;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["thresholds"] = args?.thresholds;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Trigger.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Trigger = Trigger;
/** @internal */
Trigger.__pulumiType = 'honeycombio:index/trigger:Trigger';
//# sourceMappingURL=trigger.js.map