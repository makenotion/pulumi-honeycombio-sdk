// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MarkerSetting extends pulumi.CustomResource {
    /**
     * Get an existing MarkerSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MarkerSettingState, opts?: pulumi.CustomResourceOptions): MarkerSetting {
        return new MarkerSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'honeycombio:index/markerSetting:MarkerSetting';

    /**
     * Returns true if the given object is an instance of MarkerSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MarkerSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MarkerSetting.__pulumiType;
    }

    /**
     * The color set for the marker as a hex color code.
     */
    declare public readonly color: pulumi.Output<string>;
    /**
     * Timestamp when the marker setting was created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The dataset this marker setting belongs to. If not set, it will be Environment-wide.
     */
    declare public readonly dataset: pulumi.Output<string | undefined>;
    declare public readonly markerSettingId: pulumi.Output<string>;
    /**
     * The type of marker setting. (e.g. "deploy", "job-run")
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Timestamp when the marker setting was last modified.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a MarkerSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MarkerSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MarkerSettingArgs | MarkerSettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MarkerSettingState | undefined;
            resourceInputs["color"] = state?.color;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["dataset"] = state?.dataset;
            resourceInputs["markerSettingId"] = state?.markerSettingId;
            resourceInputs["type"] = state?.type;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as MarkerSettingArgs | undefined;
            if (args?.color === undefined && !opts.urn) {
                throw new Error("Missing required property 'color'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["color"] = args?.color;
            resourceInputs["dataset"] = args?.dataset;
            resourceInputs["markerSettingId"] = args?.markerSettingId;
            resourceInputs["type"] = args?.type;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MarkerSetting.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MarkerSetting resources.
 */
export interface MarkerSettingState {
    /**
     * The color set for the marker as a hex color code.
     */
    color?: pulumi.Input<string>;
    /**
     * Timestamp when the marker setting was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The dataset this marker setting belongs to. If not set, it will be Environment-wide.
     */
    dataset?: pulumi.Input<string>;
    markerSettingId?: pulumi.Input<string>;
    /**
     * The type of marker setting. (e.g. "deploy", "job-run")
     */
    type?: pulumi.Input<string>;
    /**
     * Timestamp when the marker setting was last modified.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MarkerSetting resource.
 */
export interface MarkerSettingArgs {
    /**
     * The color set for the marker as a hex color code.
     */
    color: pulumi.Input<string>;
    /**
     * The dataset this marker setting belongs to. If not set, it will be Environment-wide.
     */
    dataset?: pulumi.Input<string>;
    markerSettingId?: pulumi.Input<string>;
    /**
     * The type of marker setting. (e.g. "deploy", "job-run")
     */
    type: pulumi.Input<string>;
}
