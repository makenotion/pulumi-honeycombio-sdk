// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Board extends pulumi.CustomResource {
    /**
     * Get an existing Board resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BoardState, opts?: pulumi.CustomResourceOptions): Board {
        return new Board(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'honeycombio:index/board:Board';

    /**
     * Returns true if the given object is an instance of Board.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Board {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Board.__pulumiType;
    }

    /**
     * The URL of the Board in the Honeycomb UI.
     */
    declare public /*out*/ readonly boardUrl: pulumi.Output<string>;
    /**
     * The number of columns to layout on the Board.
     */
    declare public readonly columnLayout: pulumi.Output<string>;
    /**
     * The description of the Board. Supports Markdown.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The name of the Board.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A query to be displayed on the Board.
     */
    declare public readonly queries: pulumi.Output<outputs.BoardQuery[] | undefined>;
    /**
     * An SLO to be displayed on the Board.
     */
    declare public readonly slos: pulumi.Output<outputs.BoardSlo[] | undefined>;
    /**
     * How the Board should be displayed in the UI.
     *
     * @deprecated Deprecated
     */
    declare public readonly style: pulumi.Output<string>;

    /**
     * Create a Board resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: BoardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BoardArgs | BoardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BoardState | undefined;
            resourceInputs["boardUrl"] = state?.boardUrl;
            resourceInputs["columnLayout"] = state?.columnLayout;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["queries"] = state?.queries;
            resourceInputs["slos"] = state?.slos;
            resourceInputs["style"] = state?.style;
        } else {
            const args = argsOrState as BoardArgs | undefined;
            resourceInputs["columnLayout"] = args?.columnLayout;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["queries"] = args?.queries;
            resourceInputs["slos"] = args?.slos;
            resourceInputs["style"] = args?.style;
            resourceInputs["boardUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Board.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Board resources.
 */
export interface BoardState {
    /**
     * The URL of the Board in the Honeycomb UI.
     */
    boardUrl?: pulumi.Input<string>;
    /**
     * The number of columns to layout on the Board.
     */
    columnLayout?: pulumi.Input<string>;
    /**
     * The description of the Board. Supports Markdown.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Board.
     */
    name?: pulumi.Input<string>;
    /**
     * A query to be displayed on the Board.
     */
    queries?: pulumi.Input<pulumi.Input<inputs.BoardQuery>[]>;
    /**
     * An SLO to be displayed on the Board.
     */
    slos?: pulumi.Input<pulumi.Input<inputs.BoardSlo>[]>;
    /**
     * How the Board should be displayed in the UI.
     *
     * @deprecated Deprecated
     */
    style?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Board resource.
 */
export interface BoardArgs {
    /**
     * The number of columns to layout on the Board.
     */
    columnLayout?: pulumi.Input<string>;
    /**
     * The description of the Board. Supports Markdown.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Board.
     */
    name?: pulumi.Input<string>;
    /**
     * A query to be displayed on the Board.
     */
    queries?: pulumi.Input<pulumi.Input<inputs.BoardQuery>[]>;
    /**
     * An SLO to be displayed on the Board.
     */
    slos?: pulumi.Input<pulumi.Input<inputs.BoardSlo>[]>;
    /**
     * How the Board should be displayed in the UI.
     *
     * @deprecated Deprecated
     */
    style?: pulumi.Input<string>;
}
